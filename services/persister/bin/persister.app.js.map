{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"pg-promise\"","webpack:///./src/app.ts","webpack:///external \"express\"","webpack:///./src/config/index.ts","webpack:///./src/config/express.ts","webpack:///external \"body-parser\"","webpack:///./src/middlewares/logger.ts","webpack:///./src/config/routes.ts","webpack:///./src/controllers/persister.ts","webpack:///./src/database/index.ts","webpack:///external \"bluebird\"","webpack:///./src/database/repos/index.ts","webpack:///./src/database/repos/documents.ts","webpack:///./src/database/sql/index.ts","webpack:///external \"path\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","express","config","app","routes","set","process","env","PORT","listen","console","log","__export","bodyParser","logger_1","use","json","logger","headersSent","res","Boolean","_header","recordStartTime","this","_startAt","hrtime","_startTime","Date","req","next","logRequest","removeListener","data","remote_addr","ip","_remoteAddress","connection","remoteAddress","undefined","getip","method","getMethod","url","originalUrl","requestURL","status","String","statusCode","getStatus","user_agent","headers","getUserAgent","res_time_ms","digits","toFixed","getResponseTime","refferer","getReferrer","JSON","stringify","on","persister","put","db","document","body","documents","insert","catch","err","code","sendStatus","select","then","docs","send","promise","pgPromise","repos_1","initOptions","promiseLib","[object Object]","obj","dc","DocumentsRepository","pgp","host","DOIEX_DB_HOST","port","parseInt","DOIEX_DB_PORT","database","DOIEX_DB_NAME","user","DOIEX_DB_USER","password","DOIEX_DB_PASSWORD","documents_1","sql_1","values","none","default","any","pg_promise_1","path","sql","file","fullPath","join","__dirname","qf","QueryFile","minify","error"],"mappings":"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","file":"persister.app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"pg-promise\");","import * as express from 'express'\nimport * as config from './config'\n\n// -----------------------------------------------------------------------------------------------\n// Configure the application server to use express\n// -----------------------------------------------------------------------------------------------\nconst app = express()\n\n// -----------------------------------------------------------------------------------------------\n// Configure the application\n// -----------------------------------------------------------------------------------------------\nconfig.express(app)\nconfig.routes(app)\n\n// -----------------------------------------------------------------------------------------------\n// Set the PORT to be used by the HTTPS Server\n// -----------------------------------------------------------------------------------------------\napp.set('port', process.env.PORT || 3000)\n\n// -----------------------------------------------------------------------------------------------\n// Start HTTPS Server\n// -----------------------------------------------------------------------------------------------\napp.listen(app.get('port'), () => {\n  console.log(('Persister server is listening on port %d in %s mode'),\n    app.get('port'),\n    app.get('env'))\n})\n\nmodule.exports = app\n","module.exports = require(\"express\");","export * from './express'\nexport * from './routes'\n","import * as expressjs from 'express' // eslint-disable-line no-unused-vars\nimport * as bodyParser from 'body-parser'\nimport { logger } from '../middlewares/logger'\n\nexport let express = (app: expressjs.Express) => {\n  // ---------------------------------------------------------------------------------------------\n  // Parse incoming request bodies in a middleware before your handlers,\n  // available under the req.body property.\n  // ---------------------------------------------------------------------------------------------\n  app.use(bodyParser.json())\n\n  // -----------------------------------------------------------------------------------------------\n  // Configure the app server to log all the requests.\n  // Note: The logger is not recording static files access.\n  // -----------------------------------------------------------------------------------------------\n  app.use(logger)\n}\n","module.exports = require(\"body-parser\");","import { RequestHandler, Request, Response, NextFunction } from 'express' // eslint-disable-line no-unused-vars\n\nexport let logger: RequestHandler =\n  (req: Request & { _startAt, _startTime },\n    res: Response & { _startAt, _startTime },\n    next: NextFunction) => {\n    // request data\n    req._startAt = undefined\n    req._startTime = undefined\n\n    // response data\n    res._startAt = undefined\n    res._startTime = undefined\n\n    // record request start time\n    recordStartTime.call(req)\n\n    function logRequest () {\n      res.removeListener('finish', logRequest)\n      res.removeListener('close', logRequest)\n\n      // record response start time\n      recordStartTime.call(res)\n\n      // Collect request/response data\n      var data = {\n        remote_addr: getip(req),\n        method: getMethod(req),\n        url: requestURL(req),\n        status: getStatus(res),\n        user_agent: getUserAgent(req),\n        res_time_ms: getResponseTime(req, res, 0),\n        refferer: getReferrer(req)\n      }\n\n      console.log(JSON.stringify(data))\n    }\n\n    res.on('finish', logRequest)\n    res.on('close', logRequest)\n\n    next()\n  }\n\n/**\n * Get request IP address.\n *\n * @param {IncomingMessage} req\n * @return {string}\n */\nfunction getip (req) {\n  return req.ip ||\n    req._remoteAddress ||\n    (req.connection && req.connection.remoteAddress) ||\n    undefined\n}\n\n/**\n * Get Request Id\n *\n * @param {object} res\n * @param {string} reqIdHeaderName\n * @return {string}\n */\nfunction getRequestId (res, reqIdHeaderName) { // eslint-disable-line no-unused-vars\n  return res.getHeader(reqIdHeaderName)\n}\n\n/**\n * Get HTTP version\n *\n * @private\n * @param {IncomingMessage} req\n * @return {string}\n */\nfunction getHttpVersion (req) { // eslint-disable-line no-unused-vars\n  return req.httpVersionMajor + '.' + req.httpVersionMinor\n}\n\n/**\n * Get request URL\n *\n * @private\n * @param {IncomingMessage} req\n * @return {string}\n */\nfunction requestURL (req) {\n  return req.originalUrl || req.url\n}\n\n/**\n * Get request method\n *\n * @private\n * @param {IncomingMessage} req\n * @return {string}\n */\nfunction getMethod (req) {\n  return req.method\n}\n\n/**\n * Get User Agent\n *\n * @private\n * @param {IncomingMessage} req\n * @return {string}\n */\nfunction getUserAgent (req) {\n  return req.headers['user-agent']\n}\n\n/**\n * Determine if the response headers have been sent.\n *\n * @private\n * @param {object} res\n * @returns {boolean}\n */\nfunction headersSent (res) {\n  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent\n}\n\n/**\n * Get response header\n *\n * @private\n * @param {IncomingMessage} req\n * @param {object} res\n * @param {String} field\n * @returns {String}\n */\nfunction getResponseHeader (req, res, field) { // eslint-disable-line no-unused-vars\n  if (!headersSent(res)) {\n    return undefined\n  }\n\n  // get header\n  var header = res.getHeader(field)\n\n  return Array.isArray(header) ? header.join(', ') : header\n}\n\n/**\n * Get response status code\n *\n * @private\n * @param {object} res\n * @returns {String}\n */\nfunction getStatus (res) {\n  return headersSent(res) ? String(res.statusCode) : undefined\n}\n\n/**\n * Get refferer\n *\n * @private\n * @param {IncomingMessage} req\n * @returns {boolean}\n */\nfunction getReferrer (req) {\n  return req.headers['referer'] || req.headers['referrer']\n}\n\n/**\n * Record the start time.\n * @private\n */\nfunction recordStartTime () {\n  this._startAt = process.hrtime()\n  this._startTime = new Date()\n}\n\n/**\n * Get response time in milliseconds\n * @param {IncomingMessage} req\n * @param {object} res\n * @param {number} digits\n * @returns {number}\n */\nfunction getResponseTime (req, res, digits) {\n  if (!req._startAt || !res._startAt) {\n    // missing request and/or response start time\n    return\n  }\n\n  // calculate diff\n  var ms = (res._startAt[0] - req._startAt[0]) * 1e3 + (res._startAt[1] - req._startAt[1]) * 1e-6\n\n  // return truncated value\n  return ms.toFixed(digits === undefined ? 3 : digits)\n}\n","import { Express } from 'express' // eslint-disable-line no-unused-vars\nimport * as persister from '../controllers/persister'\n\nexport let routes = (app: Express) => {\n  app.get('/', persister.get)\n  app.put('/', persister.put)\n}\n","import { Request, Response, NextFunction } from 'express' // eslint-disable-line no-unused-vars\nimport * as db from '../database'\n\nexport let put = (req: Request, res: Response, next: NextFunction) => {\n  try {\n    for (let document of req.body) {   \n      db.documents.insert(document)\n        .catch(err => {\n          if (err.code !== '23505') { // UNIQUENESS_VIOLATION \n           throw err\n          }\n        })\n    }\n  } catch (err) {\n    res.sendStatus(500)     \n    return next(err)   \n  }\n  res.sendStatus(200)\n}\n\nexport let get = (req: Request, res: Response, next: NextFunction) => {\n   db.documents.select()\n    .then(docs => {\n      res.send(docs)    \n    })\n    .catch(err => {\n      res.sendStatus(500)     \n      return next(err)\n    })\n    \n  // // Validate documentNumber query parameter\n  // if (!req.query.documentNumber) {\n  //   let err = 'Bad request. Missing \"documentNumber\" query parameter'\n  //   res.status(400).send(err)\n  //   return next(err)\n  // }\n\n  // db.originals.select(req.query.documentNumber)\n  //   .then(document => {\n  //     res.send(document)    \n  //   })\n  //   .catch(err => {\n  //     res.sendStatus(500)     \n  //     return next(err)\n  //   })\n}\n","import * as promise from 'bluebird'\nimport * as pgPromise from 'pg-promise'\n\nimport { IExtensions, DocumentsRepository } from './repos'\n\n// pg-promise initialization options:\nconst initOptions: pgPromise.IOptions<IExtensions> = {\n\n  // Using a custom promise library, instead of the default ES6 Promise.\n  // To make the custom promise protocol visible, you need to patch the\n  // following file: node_modules/pg-promise/typescript/ext-promise.d.ts\n  promiseLib: promise,\n\n  // Extending the database protocol with our custom repositories;\n  // API: http://vitaly-t.github.io/pg-promise/global.html#event:extend\n  extend(obj: IExtensions, dc: any) {\n    // Database Context (dc) is mainly needed for extending multiple databases\n    // with different access API.\n    // Do not use 'require()' here, because this event occurs for every task\n    // and transaction being executed, which should be as fast as possible.\n    obj.documents = new DocumentsRepository(obj, pgp)\n  }\n};\n\n// Database connection parameters:\nconst config = {\n  host: process.env.DOIEX_DB_HOST,\n  port: parseInt(process.env.DOIEX_DB_PORT),\n  database: process.env.DOIEX_DB_NAME,\n  user: process.env.DOIEX_DB_USER,\n  password: process.env.DOIEX_DB_PASSWORD\n}\n\nconst pgp: pgPromise.IMain = pgPromise(initOptions)\n\n// Create the database instance with extensions:\nconst db = <pgPromise.IDatabase<IExtensions> & IExtensions>pgp(config)\n\nexport = db\n","module.exports = require(\"bluebird\");","import { DocumentsRepository } from './documents'\n\n// Database Interface Extensions:\ninterface IExtensions { // eslint-disable-line no-undef\n  documents: DocumentsRepository // eslint-disable-line no-undef\n}\n\nexport {\n  IExtensions, // eslint-disable-line no-undef\n  DocumentsRepository // eslint-disable-line no-undef\n}\n","import { IDatabase, IMain } from 'pg-promise'\nimport sql from '../sql'\n\nexport class DocumentsRepository {\n  constructor (db: any, pgp: IMain) {\n    this.db = db\n    this.pgp = pgp\n  }\n\n  private db: IDatabase<any> // eslint-disable-line no-undef\n  private pgp: IMain // eslint-disable-line no-undef\n\n  insert (values) {\n    return this.db.none(sql.documents.insert, values)\n  }\n\n  select () {\n    return this.db.any(sql.documents.select)\n  }\n}\n","import { QueryFile, TQueryFileOptions } from 'pg-promise' // eslint-disable-line no-unused-vars\nimport * as path from 'path'\n\nexport default {\n  documents: {\n    insert: sql('documents/insert.sql'),\n    select: sql('documents/select.sql')\n  }\n}\n\nfunction sql (file: string): QueryFile {\n  const fullPath: string = path.join(__dirname, 'src/database/sql/', file)\n\n  const options: TQueryFileOptions = {\n\n    // minifying the SQL is always advised;\n    // see also option 'compress' in the API;\n    minify: true\n  }\n\n  const qf: QueryFile = new QueryFile(fullPath, options)\n\n  if (qf.error) {\n    // Something is wrong with our query file :(\n    // Testing all files through queries can be cumbersome,\n    // so we also report it here, while loading the module:\n    console.error(qf.error)\n  }\n  return qf\n}\n","module.exports = require(\"path\");"],"sourceRoot":""}